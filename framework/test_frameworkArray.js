var cspframework = {};
cspframework["1.1"] = "1.1 Incorporating multiple perspectives through collaboration improves the computing innovations being developed.";
cspframework["1.1.1"] = "1.1.1 Explain how computing innovations are improved through collaboration.";
cspframework["1.1.1A"] = "1.1.1A A computing innovation includes a program as an integral part of its function.";
cspframework["1.1.1B"] = "1.1.1B A computing innovation can be physical (i.e., self-driving car), non-physical computing software (i.e., picture editing software), or non-physical computing concepts (i.e., eCommerce).";
cspframework["1.1.1C"] = "1.1.1C Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it.";
cspframework["1.1.1D"] = "1.1.1D Collaboration that includes diverse perspectives helps to avoid bias in the development of computing innovations.";
cspframework["1.1.1E"] = "1.1.1E Consultation and communication with users is an important aspect of the development of computing innovations.";
cspframework["1.1.1F"] = "1.1.1F Research gathered from users can be used to understand the purpose of a program from diverse perspectives in order to develop a program that can be used to fully incorporate these perspectives.";
cspframework["1.1.2"] = "1.1.2 Explain how computing innovations are developed by groups of people.";
cspframework["1.1.2A"] = "1.1.2A Online tools support collaboration by allowing programmers to virtually share and provide feedback on ideas and documents.";
cspframework["1.1.2B"] = "1.1.2B Common models such as pair programming exist to facilitate collaboration.";
cspframework["1.1.3"] = "1.1.3 Demonstrate effective interpersonal skills during collaboration.";
cspframework["1.1.3A"] = "1.1.3A Effective collaborative teams practice interpersonal skills including but not limited to:";
cspframework["1.1.3B"] = "1.1.3B &middot; communication skills;";
cspframework["1.1.3C"] = "1.1.3C &middot; consensus building;";
cspframework["1.1.3D"] = "1.1.3D &middot; conflict resolution; and";
cspframework["1.1.3E"] = "1.1.3E &middot; negotiation.";
cspframework["1.2"] = "1.2 Developers create and innovate using an iterative design process that is user-focused, that incorporates implementation/feedback cycles, and that leaves ample room for experimentation and risk-taking.";
cspframework["1.2.1"] = "1.2.1 Describe the purpose of a computing innovation.";
cspframework["1.2.1A"] = "1.2.1A &middot; The purpose of computing innovations is to solve problems or pursue interests through creative expression.";
cspframework["1.2.1B"] = "1.2.1B An understanding of the purpose of a computing innovation provides developers with an improved ability to develop the computing innovation.";
cspframework["1.2.2"] = "1.2.2 Explain how a program or code segment functions.";
cspframework["1.2.2A"] = "1.2.2A &middot; A program is a collection of program statements that performs a specific task when run by a computer. A program is often referred to as software.";
cspframework["1.2.2B"] = "1.2.2B &middot; A code segment refers to a collection of program statements that are part of a program.";
cspframework["1.2.2C"] = "1.2.2C &middot; A program needs to work for a variety of inputs and situations.";
cspframework["1.2.2D"] = "1.2.2D &middot; The behavior of a program is how a program functions during execution and is often described by how a user interacts with it.";
cspframework["1.2.2E"] = "1.2.2E &middot; A program can be described broadly by what it does or in more detail by both what the program does and how the program statements accomplish this function.";
cspframework["1.2.3"] = "1.2.3 Identify input(s) to a program.";
cspframework["1.2.3A"] = "1.2.3A &middot; Program input is data that are sent to a computer for processing by a program. Input can come in a variety of forms, such as tactile, audible, visual, or text.";
cspframework["1.2.3B"] = "1.2.3B &middot; An event is associated with an action and supplies input data to a program.";
cspframework["1.2.3C"] = "1.2.3C &middot; Events can be generated when a key is pressed, a mouse is clicked, a program is started, or by any other defined action that affects the flow of execution.";
cspframework["1.2.3D"] = "1.2.3D &middot; Inputs usually affect the output produced by a program.";
cspframework["1.2.3E"] = "1.2.3E &middot; In event-driven programming, program statements are executed when triggered instead of through the sequential flow of control.";
cspframework["1.2.3F"] = "1.2.3F &middot; Input can come from a user or other applications.";
cspframework["1.2.4"] = "1.2.4 Identify output(s) produced by a program.";
cspframework["1.2.4A"] = "1.2.4A &middot; Program output is any data that are sent from a program to a device. Program output can come in a variety of forms, such as tactile, audible, visual, or text.";
cspframework["1.2.4B"] = "1.2.4B &middot; Program output is usually based on a program’s input or prior state (such as internal values).";
cspframework["1.2.5"] = "1.2.5 Develop a program using a development process.";
cspframework["1.2.5A"] = "1.2.5A &middot; A development process could be ordered and intentional, or exploratory in nature.";
cspframework["1.2.5B"] = "1.2.5B &middot; There are multiple development processes. The following phases are commonly used when developing a program:";
cspframework["1.2.5C"] = "1.2.5C &middot; investigating and reflecting;";
cspframework["1.2.5D"] = "1.2.5D &middot; designing;";
cspframework["1.2.5E"] = "1.2.5E &middot; prototyping; and";
cspframework["1.2.5F"] = "1.2.5F &middot; testing.";
cspframework["1.2.5G"] = "1.2.5G &middot; A development process that is iterative requires refinement and revision based on feedback, testing or reflection throughout the process. This may require revisiting earlier phases of the process.";
cspframework["1.2.5H"] = "1.2.5H &middot; A development process that is incremental is one that breaks the problem into smaller pieces, and makes sure each piece works before adding it to the whole.";
cspframework["1.2.6"] = "1.2.6 Design a program and its user interface.";
cspframework["1.2.6A"] = "1.2.6A &middot; The design of a program incorporates investigation to determine the requirements.";
cspframework["1.2.6B"] = "1.2.6B &middot; Investigation in a development process is useful in understanding, identifying the constraints, concerns, and interests of the people who will use the program.";
cspframework["1.2.6C"] = "1.2.6C &middot; Some ways investigation can be performed are as follows:";
cspframework["1.2.6D"] = "1.2.6D &middot; collecting data through surveys,";
cspframework["1.2.6E"] = "1.2.6E &middot; user testing,";
cspframework["1.2.6F"] = "1.2.6F &middot; interviews, and";
cspframework["1.2.6G"] = "1.2.6G &middot; direct observations.";
cspframework["1.2.6H"] = "1.2.6H &middot; Program requirements describe how a program functions, and may include a description of user interactions that a program must provide.";
cspframework["1.2.6I"] = "1.2.6I &middot; A program specification defines the requirements for the program.";
cspframework["1.2.6J"] = "1.2.6J &middot; In a development process, the design phase outlines how to accomplish a given program specification.";
cspframework["1.2.6K"] = "1.2.6K &middot; The design phase of a program includes:";
cspframework["1.2.6L"] = "1.2.6L &middot; brainstorming";
cspframework["1.2.6M"] = "1.2.6M &middot; planning and storyboarding";
cspframework["1.2.6N"] = "1.2.6N &middot; organizing the program into modules and functional components";
cspframework["1.2.6O"] = "1.2.6O &middot; the creation of diagrams that represent the layouts of the user interface; and";
cspframework["1.2.6P"] = "1.2.6P &middot; the development of a testing strategy for the program.";
cspframework["1.2.7"] = "1.2.7 Describe the purpose of a code segment or program by writing documentation.";
cspframework["1.2.7A"] = "1.2.7A &middot; Program documentation is a written description of the function of a code segment, event, procedure, or program and how it was developed.";
cspframework["1.2.7B"] = "1.2.7B &middot; Comments are a form of program documentation written into the program to be read by people and do not impact how a program runs.";
cspframework["1.2.7C"] = "1.2.7C &middot; Programmers should document a program throughout the process of developing a program.";
cspframework["1.2.7D"] = "1.2.7D &middot; Program documentation helps in developing and maintaining correct programs when working individually or in collaborative programming environments.";
cspframework["1.2.7E"] = "1.2.7E &middot; Not all programming environments support comments, so other methods of documentation may be required.";
cspframework["1.2.8"] = "1.2.8 Acknowledge code segments used from other sources.";
cspframework["1.2.8A"] = "1.2.8A &middot; It is important to acknowledge any code segments that were developed collaboratively or by another source.";
cspframework["1.2.8B"] = "1.2.8B &middot; Acknowledgement of code segment(s) written by someone else and used in a program can be in the program documentation. The acknowledgement should include the origin or original author’s name.";
cspframework["1.2.9"] = "1.2.9 For errors in a program: (a) Identify the error. (b) Correct the error.";
cspframework["1.2.9A"] = "1.2.9A &middot; A logic error is a mistake in the program that allows a program to run but causes it to behave incorrectly or unexpectedly.";
cspframework["1.2.9B"] = "1.2.9B &middot; A syntax error is a mistake in the program where the rules of the programming language are not followed.";
cspframework["1.2.9C"] = "1.2.9C &middot; A run-time error is a mistake in the program that occurs during the execution of a program. Programming languages define their own run-time errors.";
cspframework["1.2.9D"] = "1.2.9D &middot; An overflow error is an error that occurs when the computer attempts to handle a number that is outside of the defined range of values can be represented.";
cspframework["1.2.9E"] = "1.2.9E &middot; The following are effective ways to find and correct errors:";
cspframework["1.2.9F"] = "1.2.9F &middot; test-cases;";
cspframework["1.2.9G"] = "1.2.9G &middot; hand-tracing;";
cspframework["1.2.9H"] = "1.2.9H &middot; visualizations;";
cspframework["1.2.9I"] = "1.2.9I &middot; debuggers; and";
cspframework["1.2.9J"] = "1.2.9J &middot; adding extra output statement.";
cspframework["1.2.1"] = "1.2.1 Identify inputs and corresponding expected output or behaviors that can be used to check the correctness of a program.";
cspframework["1.2.1A"] = "1.2.1A &middot; In the development process, testing uses defined inputs to ensure that a program is producing the expected outcomes. Programmers use the result from testing to revise their programs.";
cspframework["1.2.1B"] = "1.2.1B &middot; Defined inputs used to test a program should demonstrate the different expected outcomes that are at or just beyond the extremes, minimum and maximum, of input data.";
cspframework["1.2.1C"] = "1.2.1C &middot; Program requirements are needed to identify appropriate defined inputs for testing.";
cspframework["2.1"] = "2.1 The way that the computer represents data is different from the way that the data are interpreted and displayed for the user. Programs are used to translate data into a representation that is more easily understood by people.";
cspframework["2.1.1"] = "2.1.1 Explain how data can be represented using bits.";
cspframework["2.1.1A"] = "2.1.1A Data are values that can be stored in variables, passed as input to procedures and returned from procedures, items of lists, or standalone constant values.";
cspframework["2.1.1B"] = "2.1.1B Computing devices represent data digitally, which means that the lowest level components of any value are bits.";
cspframework["2.1.1C"] = "2.1.1C A “bit” is shorthand for “binary digit,” and is either  or 1.";
cspframework["2.1.1D"] = "2.1.1D A “byte” is 8 bits.";
cspframework["2.1.1E"] = "2.1.1E Abstraction is the process of reducing complexity by focusing on the main idea. By hiding details irrelevant to the question at hand and bringing together related and useful details, abstraction reduces complexity and allows one to focus on the idea.";
cspframework["2.1.1F"] = "2.1.1F Bits are grouped to represent abstractions. These abstractions include, but are not limited to numbers, characters, and color.";
cspframework["2.1.1G"] = "2.1.1G The same sequence of bits may represent different types of data in different contexts.";
cspframework["2.1.1H"] = "2.1.1H Analog data are data with values that change continuously, or smoothly, over time. Some examples of analog data include music, colors of a painting, or position of a sprinter during a race.";
cspframework["2.1.1I"] = "2.1.1I The use of digital data to approximate real-world analog data is an example of abstraction.";
cspframework["2.1.1J"] = "2.1.1J Analog data can be closely approximated digitally using a sampling technique, which means measuring values of the analog signal at regular intervals (usually in time or space) called samples. The samples are measured to figure out the exact bits required to store each sample.";
cspframework["2.1.2"] = "2.1.2 Explain the consequences of using bits to represent data.";
cspframework["2.1.2A"] = "2.1.2A In many programming languages, the fixed number of bits used to represent integers limits the range of integer values and mathematical operations on those values; this limitation can result in overflow or other errors.";
cspframework["2.1.2B"] = "2.1.2B Other programming languages provide an abstraction through which the size of representable integers is limited only by the size of the computer\'s memory; this is the case for the language defined in the exam reference sheet.";
cspframework["2.1.2C"] = "2.1.2C In programming languages, the fixed number of bits used to represent real numbers limits the range of values and mathematical operations on those values; this limitation can result in round-off and other errors. Real numbers can only be approximated in computer storage. EXCLUSION STATEMENT (for EK): Specific range limitations are beyond the scope of this course and the AP Exam.";
cspframework["2.1.3"] = "2.1.3 For binary numbers: (a) Calculate the binary (base 2) equivalent of a positive integer (base 1) and vice versa. (b) Compare and order binary numbers.";
cspframework["2.1.3A"] = "2.1.3A Number bases, including binary and decimal, are used to represent data.";
cspframework["2.1.3B"] = "2.1.3B Binary (base 2) uses only combinations of the digits zero and one.";
cspframework["2.1.3C"] = "2.1.3C Decimal (base 1) uses only combinations of the digits  – 9.";
cspframework["2.1.3D"] = "2.1.3D As with decimal, a digit’s position within the binary sequence determines its numeric value. The numeric value is equal to the bits value multiplied by the place value of the position.";
cspframework["2.1.3E"] = "2.1.3E The place value of each position is determined by the base raised to the power of the position. Positions are numbered starting at the rightmost position with  and increasing by 1 for each subsequent position to the left.";
cspframework["2.1.4"] = "2.1.4 Compare data compression algorithms to determine which is best in a particular context.";
cspframework["2.1.4A"] = "2.1.4A Data compression can reduce the size (number of bits) of the data transmitted or stored.";
cspframework["2.1.4B"] = "2.1.4B Fewer bits does not necessarily mean less information.";
cspframework["2.1.4C"] = "2.1.4C The amount of reduction in bits by compression depends on both the amount of redundancy in the original data representation and the compression algorithm applied.";
cspframework["2.1.4D"] = "2.1.4D Lossless data compression algorithms can usually reduce the number of bits stored or transmitted while guaranteeing complete reconstruction of the original data.";
cspframework["2.1.4E"] = "2.1.4E Lossy data compression algorithms can significantly reduce the number of bits stored or transmitted, but only allow the reconstruction of an approximation of the original data.";
cspframework["2.1.4F"] = "2.1.4F Lossy data compression algorithms can usually reduce the number of bits stored or transmitted more than lossless compression.";
cspframework["2.1.4G"] = "2.1.4G In situations where quality or ability to reconstruct the original is maximally important, lossless compression algorithms are typically chosen.";
cspframework["2.1.4H"] = "2.1.4H In situations where minimizing data size or short transmission time is maximally important, lossy compression algorithms are typically chosen.";
cspframework["2.2"] = "2.2 Programs can be used to process data, which allows users to discover information and create new knowledge.";
cspframework["2.2.1"] = "2.2.1 Describe what information can be extracted from data.";
cspframework["2.2.1A"] = "2.2.1A Information is the collection of facts and patterns extracted from data.";
cspframework["2.2.1B"] = "2.2.1B Data provide opportunities for identifying trends, making connections, and addressing problems.";
cspframework["2.2.1C"] = "2.2.1C A correlation is an association between two or more things.";
cspframework["2.2.1D"] = "2.2.1D Digitally processed data may show correlation between variables. A correlation found in data does not necessarily imply a causation relationship exists. Often additional research is needed to verify causation.";
cspframework["2.2.1E"] = "2.2.1E Often a single data source does not contain the necessary data to draw a conclusion. It may be required to combine data from a variety of sources to formulate a conclusion.";
cspframework["2.2.2"] = "2.2.2 Describe what information can be extracted from metadata.";
cspframework["2.2.2A"] = "2.2.2A Metadata are data about data. Metadata is associated with the primary data; the primary data may be an image, a Web page, or other complex object.";
cspframework["2.2.2B"] = "2.2.2B Changes and deletions made to metadata do not change the primary data.";
cspframework["2.2.2C"] = "2.2.2C Metadata are used for finding, organizing and managing information.";
cspframework["2.2.2D"] = "2.2.2D Metadata can increase the effective use of data or data sets by providing additional information.";
cspframework["2.2.2E"] = "2.2.2E Metadata allows data to be structured and organized.";
cspframework["2.2.3"] = "2.2.3 Identify the challenges associated with processing data.";
cspframework["2.2.3A"] = "2.2.3A The ability to process data depends on the capabilities of the users and their tools. Therefore, a data set can be considered to be a large data set based on the capabilities of some users, but not necessarily for all users.";
cspframework["2.2.3B"] = "2.2.3B Data pose challenges regardless of size. Such as:";
cspframework["2.2.3C"] = "2.2.3C &middot; the need to clean data";
cspframework["2.2.3D"] = "2.2.3D &middot; incomplete data";
cspframework["2.2.3E"] = "2.2.3E &middot; invalid data";
cspframework["2.2.3F"] = "2.2.3F &middot; the need to combine data sources";
cspframework["2.2.3G"] = "2.2.3G Depending on how data are being collected, the data may not be uniform. For example, if users enter data into an open field, the way they choose to abbreviate, spell or capitalize something may vary from user to user.";
cspframework["2.2.3H"] = "2.2.3H Cleaning data is a process that makes the data uniform without changing its meaning. For example, replacing all abbreviations, spellings and capitalizations with the same word.";
cspframework["2.2.3I"] = "2.2.3I Problems of bias are often caused by the type or source of data that is being collected. Bias is not eliminated by simply collecting more data.";
cspframework["2.2.3J"] = "2.2.3J The size of the data set affects the amount of information that can be extracted from it.";
cspframework["2.2.3K"] = "2.2.3K Large data sets are difficult to process using a single computer and may require parallel systems.";
cspframework["2.2.3L"] = "2.2.3L Scalability of systems is an important consideration when working with large data sets, since the size or scale of a system affects how that data set can be processed and stored.";
cspframework["2.2.4"] = "2.2.4 Extract information from data using a program.";
cspframework["2.2.4A"] = "2.2.4A Programs can be used to process data to acquire information.";
cspframework["2.2.4B"] = "2.2.4B Tables, diagrams, and textual displays or other visual tools can be used in communicating insight and knowledge gained from data.";
cspframework["2.2.4C"] = "2.2.4C Search tools are useful for efficiently finding information.";
cspframework["2.2.4D"] = "2.2.4D Data filtering systems are important tools for finding information and recognizing patterns in the data.";
cspframework["2.2.4E"] = "2.2.4E Programs, including spreadsheets, help to efficiently organize and find trends in information.";
cspframework["2.2.4F"] = "2.2.4F Some processes that can be used to extract or modify information from data include:";
cspframework["2.2.4G"] = "2.2.4G &middot; transforming every element of a data set, such as doubling every element in a list, or extracting the parent’s email from every student record;";
cspframework["2.2.4H"] = "2.2.4H &middot; filtering a data set, such as keeping only positive numbers from a list of numbers, or keeping only students who signed up for band from all the student records;";
cspframework["2.2.4I"] = "2.2.4I &middot; combining or comparing data in some way, such as adding up a list of numbers, or finding the student who has the highest GPA; OR";
cspframework["2.2.4J"] = "2.2.4J &middot; visualize a data set through a chart, graph or other visual representation.";
cspframework["2.2.5"] = "2.2.5 Explain how programs can be used to gain insight and knowledge from data.";
cspframework["2.2.5A"] = "2.2.5A Programs are used in an iterative and interactive way when processing information to allow users to gain insight and knowledge.";
cspframework["2.2.5B"] = "2.2.5B Programmers can use programs to filter and clean digital data , thereby gaining insight and knowledge.";
cspframework["2.2.5C"] = "2.2.5C Combining data sources, clustering data, and classifying data are parts of the process of using programs to gain insight and knowledge from data.";
cspframework["2.2.5D"] = "2.2.5D Insight and knowledge can be obtained from translating and transforming digitally represented information.";
cspframework["2.2.5E"] = "2.2.5E Patterns can emerge when data is transformed using programs.";
cspframework["3.1"] = "3.1 To find specific solutions to generalizable problems, programmers represent and organize data in multiple ways.";
cspframework["3.1.1"] = "3.1.1 Represent a value with a variable.";
cspframework["3.1.1A"] = "3.1.1A A variable is an abstraction inside the program that can hold a value. Each variable has associated data storage that represents one value at a time, but that value can be a list or other collection that in turn contains multiple values.";
cspframework["3.1.1B"] = "3.1.1B Using meaningful variable names helps computer scientists understand what values are represented by the variable.";
cspframework["3.1.1C"] = "3.1.1C Some programming languages provide types to represent data, which are referenced using variables. These types include: numbers, Booleans, lists, and strings.";
cspframework["3.1.1D"] = "3.1.1D Some values are better suited to representation using one type of data rather than another.";
cspframework["3.1.2"] = "3.1.2 Determine the value of a variable as a result of an assignment.";
cspframework["3.1.2A"] = "3.1.2A The assignment operator allows a program to change the value represented by a variable. The exam reference sheet provides the “←” operator to use for assignment. For example, playerName ← expression which evaluates expression and assigns the result to the variable playerName.";
cspframework["3.1.2B"] = "3.1.2B The value stored in a variable will be the most recent value assigned. For example: a<-1; b<-a; a<-2; display(b) still displays 1.";
cspframework["3.1.3"] = "3.1.3 Represent a list or string using a variable.";
cspframework["3.1.3A"] = "3.1.3A A list is an ordered sequence of elements. For example, [value1, value2, value3, …] where value1 is the first element, value 2 is the second element, value 3 is the third element, …";
cspframework["3.1.3B"] = "3.1.3B An element is an individual value in a list that is assigned a unique index.";
cspframework["3.1.3C"] = "3.1.3C An index is a common method for referencing the elements in a list or string using natural numbers.";
cspframework["3.1.3D"] = "3.1.3D A string is an ordered sequence of characters.";
cspframework["3.1.4"] = "3.1.4 For data abstraction: (a) Develop data abstraction using lists to store multiple elements. (b) Explain how the use of data abstraction manages complexity in program code.";
cspframework["3.1.4A"] = "3.1.4A Data abstraction provides a separation between the abstract properties of a data type and the concrete details of its representation.";
cspframework["3.1.4B"] = "3.1.4B Data abstractions manage complexity in the program by giving a collection of data a name without the specific details of the representation.";
cspframework["3.1.4C"] = "3.1.4C Data abstractions can be created using lists.";
cspframework["3.1.4D"] = "3.1.4D Developing a data abstraction to implement in a program can result in a program that is easier to develop and maintain.";
cspframework["3.1.4E"] = "3.1.4E Data abstractions often contain different types of elements.";
cspframework["3.1.4F"] = "3.1.4F The use of lists allows multiple related items to be treated as a single value. Lists are referred to by different names, such as ‘array’, depending on the programming language. Exception: The use of linked lists is beyond the scope of this course.";
cspframework["alue1, v"] = "The exam reference sheet provides the notation [value1, value2, value 3…] to create a list with those values as the first, second, third… items. For example,";
cspframework["alue1, v"] = "o aList ← [value1, value2, value3...] - assigns aList to a new list containing values for value1, value2, value3, and … at indices 1, 2, 3, and … respectively.";
cspframework["alue1, m"] = "alue1, m The exam reference sheet describes a list structure whose index values are 1 through the number of elements in the list, inclusive. Using an index value outside of this range will result in an error.";
cspframework["3.2"] = "3.2 The way statements are sequenced and combined in a program determines the computed result. Programs incorporate iteration and selection constructs to represent repetition and make decisions to handle varied input values.";
cspframework["3.2.1"] = "3.2.1 Express an algorithm that uses sequencing without using a programming language.";
cspframework["3.2.1A"] = "3.2.1A An algorithm is a finite set of instructions that accomplish a specific task.";
cspframework["3.2.1B"] = "3.2.1B Beyond visual and textual programming languages, algorithms can be expressed in a variety of ways such as natural language, diagrams, and pseudocode.";
cspframework["3.2.1C"] = "3.2.1C Algorithms executed by a program are implemented using programming languages.";
cspframework["3.2.1D"] = "3.2.1D Every algorithm can be constructed using combinations of sequencing, selection, and iteration.";
cspframework["3.2.2"] = "3.2.2 Represent a step-by-step algorithmic process using sequential code statements.";
cspframework["3.2.2A"] = "3.2.2A Sequencing is the application of each step of an algorithm in the order in which the code statements are given.";
cspframework["3.2.2B"] = "3.2.2B A code statement is a part of program code that expresses an action to be carried out.";
cspframework["3.2.2C"] = "3.2.2C Expressions can consist of a value, a variable, operators, or procedure calls that return a value.";
cspframework["3.2.2D"] = "3.2.2D Expressions are evaluated to produce a single value.";
cspframework["3.2.2E"] = "3.2.2E The evaluation of expressions follows a set order of operations defined by the programming language.";
cspframework["3.2.2F"] = "3.2.2F Sequential statements execute in the order they appear in the code segment.";
cspframework["3.2.2G"] = "3.2.2G Clarity and readability are important considerations when expressing an algorithm in a programming language.";
cspframework["3.2.3"] = "3.2.3 Evaluate expressions that use arithmetic operators.";
cspframework["3.2.3A"] = "3.2.3A Arithmetic operators are part of most programming languages and include addition, subtraction, multiplication, division, and modulus operators.";
cspframework["3.2.3B"] = "3.2.3B The exam reference sheet provides a MOD b, which evaluates to the remainder when a is divided by b. Assume that a is an integer greater than or equal to  and b is an integer greater than . For example, 17 MOD 5 evaluates to 2.";
cspframework["3.2.3C"] = "3.2.3C The exam reference sheet provides the arithmetic operators +, -, *, /, and MOD.";
cspframework["3.2.3D"] = "3.2.3D &middot; a + b";
cspframework["3.2.3E"] = "3.2.3E &middot; a – b";
cspframework["3.2.3F"] = "3.2.3F &middot; a * b";
cspframework["3.2.3G"] = "3.2.3G &middot; a / b";
cspframework["3.2.3H"] = "3.2.3H &middot; a MOD b";
cspframework["3.2.3I"] = "3.2.3I These are used to perform arithmetic on a and b. For example, 17 / 5 evaluates to 3.4.";
cspframework["3.2.3J"] = "3.2.3J The mathematical order of operations applies when evaluating expressions.";
cspframework["3.2.4"] = "3.2.4 Evaluate expressions that manipulate strings.";
cspframework["3.2.4A"] = "3.2.4A String concatenation joins together two or more strings end-to-end to make a new string.";
cspframework["3.2.4B"] = "3.2.4B A substring is part of an existing string.";
cspframework["3.2.5"] = "3.2.5 For relationships between two variables, expressions, or values: (a) Represent using relational operators (b) Evaluate expressions that use relational operators.";
cspframework["3.2.5A"] = "3.2.5A A Boolean value is either true or false.";
cspframework["3.2.5B"] = "3.2.5B The exam reference sheet provides the following relational operators =, ≠, >, <, ≥, and ≤.";
cspframework["3.2.5C"] = "3.2.5C &middot; a = b";
cspframework["3.2.5D"] = "3.2.5D &middot; a ≠ b";
cspframework["3.2.5E"] = "3.2.5E &middot; a > b";
cspframework["3.2.5F"] = "3.2.5F &middot; a < b";
cspframework["3.2.5G"] = "3.2.5G &middot; a ≥ b";
cspframework["3.2.5H"] = "3.2.5H &middot; a ≤ b";
cspframework["3.2.5I"] = "3.2.5I These are used to test the relationship between two variables, expressions, or values and evaluate to a Boolean value. For example, a = b evaluates to true if a and b are equal; otherwise, it evaluates to false.";
cspframework["3.2.6"] = "3.2.6 For relationships between Boolean values: (a) Represent using logical operators. (b) Evaluate expressions that use logic operators.";
cspframework["3.2.6A"] = "3.2.6A The exam reference sheet provides the following logic operators: NOT, AND, and OR, which evaluate to a Boolean value.";
cspframework["3.2.6B"] = "3.2.6B The exam reference sheet provides NOT condition, which evaluates to true if condition is false; otherwise it evaluates to false.";
cspframework["3.2.6C"] = "3.2.6C The exam reference sheet provides condition1 AND condition2, which evaluates to true if both condition1 and condition2 are true; otherwise it evaluates to false.";
cspframework["3.2.6D"] = "3.2.6D The exam reference sheet provides condition1 OR condition2, which evaluates to true if condition1 is true or if condition2 is true or if both condition1 and condition2 are true; otherwise it evaluates to false.";
cspframework["3.2.6E"] = "3.2.6E The operands for a logic operator are either a Boolean expression or a single Boolean value.";
cspframework["3.2.7"] = "3.2.7 Express an algorithm that uses selection without using a programming language.";
cspframework["3.2.7A"] = "3.2.7A Selection determines which parts of an algorithm are executed based on a condition being true or false.";
cspframework["3.2.8"] = "3.2.8 For selection: (a) Represent using conditional statements. (b) Determine the result of conditional statements.";
cspframework["3.2.8A"] = "3.2.8A Conditional statements or “if-statements” affect the sequential flow of control by executing different statements based on the value of a Boolean expression.";
cspframework["3.2.8B"] = "3.2.8B The exam reference sheet provides IF(condition) { <block of statements> } in which the code in block of statements is executed if the Boolean expression condition evaluates to true; no action is taken if condition evaluates to false.";
cspframework["3.2.8C"] = "3.2.8C The exam reference sheet provides IF(condition) { <first block of statements> } ELSE { <second block of statements> } in which the code in first block of statements is executed if the Boolean expression condition evaluates to true; otherwise, the code in second block of statements is executed.";
cspframework["3.2.9"] = "3.2.9 For nested selection: (a) Represent using nested conditional statements. (b) Determine the result of nested conditional statements.";
cspframework["3.2.9A"] = "3.2.9A Nested conditional statements or “else if” statements consist of conditional statements within conditional statements.";
cspframework["3.2.9B"] = "3.2.9B If the Boolean condition of the initial conditional statement evaluates to false, then the Boolean condition of the nested conditional statement is evaluated.";
cspframework["3.2.1"] = "3.2.1 Express an algorithm that uses iteration without using a programming language.";
cspframework["3.2.1A"] = "3.2.1A Iteration is a repetitive portion of an algorithm. Iteration repeats until a given condition is met or a specified number of times.";
cspframework["3.2.11"] = "3.2.11 For iteration: (a) Represent using iteration statements. (b) Determine the result or side-effect of iteration statements.";
cspframework["3.2.11A"] = "3.2.11A Iteration statements change the sequential flow of control by repeating a set of statements zero or more times until a stopping condition is met.";
cspframework["3.2.11B"] = "3.2.11B The exam reference sheet provides REPEAT n TIMES { <block of statements> } in which the block of statements is executed n times.";
cspframework["3.2.11C"] = "3.2.11C The exam reference sheet provides REPEAT UNTIL(condition) { <block of statements> } in which the code in block of statements is repeated until the Boolean expression condition evaluates to true.";
cspframework["3.2.11D"] = "3.2.11D In REPEAT UNTIL (condition) iteration, an infinite loop occurs when the ending condition will never evaluate to true.";
cspframework["3.2.11E"] = "3.2.11E In REPEAT UNTIL (condition) iteration, if the conditional evaluates to true initially, the loop body is not executed at all due to the condition being checked before the loop.";
cspframework["3.2.12"] = "3.2.12 Compare multiple algorithms to determine if they yield the same side effect or result.";
cspframework["3.2.12A"] = "3.2.12A Algorithms can be written in different ways and still accomplish the same tasks.";
cspframework["3.2.12B"] = "3.2.12B Algorithms that appear similar can yield different side-effects or results.";
cspframework["3.2.12C"] = "3.2.12C Some selections can be written as equivalent Boolean expressions.";
cspframework["3.2.12D"] = "3.2.12D Some Boolean expressions can be written as equivalent selections.";
cspframework["3.2.12E"] = "3.2.12E Different algorithms can be developed or used to solve the same problem.";
cspframework["3.2.13"] = "3.2.13 For algorithms:";
cspframework["3.2.14"] = "3.2.14 (a) Create algorithms.";
cspframework["3.2.15"] = "3.2.15 (b) Combine and modify existing algorithms.";
cspframework["3.2.13A"] = "3.2.13A Algorithms can be created from an idea, by combining existing algorithms, or by modifying existing algorithms.";
cspframework["3.2.13B"] = "3.2.13B Knowledge of existing algorithms can help in constructing algorithms. Some existing algorithms include:";
cspframework["3.2.13C"] = "3.2.13C &middot; determining the maximum or minimum value of 2 or more numbers; or";
cspframework["3.2.13D"] = "3.2.13D &middot; computing the sum or average of 2 or more numbers; or";
cspframework["3.2.13E"] = "3.2.13E &middot; identifying if an integer is or is not evenly divisible by another integer; or";
cspframework["3.2.13F"] = "3.2.13F &middot; determining a robot’s path through a maze ;";
cspframework["3.2.13G"] = "3.2.13G Using existing correct algorithms as building blocks for constructing another algorithm has benefits such as reducing development time, reducing testing, and simplifying the identification of errors.";
cspframework["3.2.14"] = "3.2.14 For list operations: (a) Write expressions that use list indexing and list procedures. (b) Evaluate expressions that use list indexing and list procedures.";
cspframework["3.2.14A"] = "3.2.14A Basic operations on lists include:";
cspframework["3.2.14B"] = "3.2.14B &middot; accessing an element by index;";
cspframework["3.2.14C"] = "3.2.14C ▪ aList[i] refers to the element of aList at index i. The first element of aList is at index 1, alist[1].";
cspframework["3.2.14D"] = "3.2.14D &middot; assigning a value of an element of a list to a variable;";
cspframework["3.2.14E"] = "3.2.14E ▪ x ← aList [i] - assigns the value of aList[i] to the variable x.inserting elements at a given index,";
cspframework["3.2.14F"] = "3.2.14F &middot; assigning a value to an element of a list;";
cspframework["3.2.14G"] = "3.2.14G ▪ aList[i] ← x - assigns the value of x to aList[i].";
cspframework["3.2.14H"] = "3.2.14H ▪ aList[i] ← aList[j] - assigns the value of aList[j] to aList[i].";
cspframework["3.2.14I"] = "3.2.14I &middot; inserting elements at a given index;";
cspframework["3.2.14J"] = "3.2.14J ▪ INSERT(aList, i, value) - any variables in aList at indices greater than or equal to i are shifted one location to the right. The length of the list is increased by 1, and value is placed at index i in aList.";
cspframework["3.2.14K"] = "3.2.14K &middot; adding elements to the end of the list (append);";
cspframework["3.2.14L"] = "3.2.14L ▪ APPEND(aList, value) - the length of aList is increased by 1, and value is placed at the end of the aList.";
cspframework["3.2.14M"] = "3.2.14M &middot; removing elements; and";
cspframework["3.2.14N"] = "3.2.14N ▪ REMOVE(aList, i) - Removes the item at index i in aList and shifts to the left any values at indices greater than i. The length of aList is decreased by 1.";
cspframework["3.2.14O"] = "3.2.14O &middot; determining the length of a list.";
cspframework["3.2.14P"] = "3.2.14P ▪ LENGTH(aList) – Evaluates to the number of elements currently in aList.";
cspframework["3.2.14Q"] = "3.2.14Q List procedures are implemented in accordance with the syntax rules of the language.";
cspframework["3.2.15"] = "3.2.15 For algorithms involving elements of a list: (a) Represent using iterative statements to traverse a list. (b) Determine the result of an algorithm with list traversals.";
cspframework["3.2.15A"] = "3.2.15A Traversing a list can be a complete traversal where all elements in the list are accessed, or a partial traversal where only a portion of elements are accessed. Exclusion Statement: Traversing multiple lists at the same time using the same index for both, parallel traversals, is beyond the scope of this course.";
cspframework["3.2.15B"] = "3.2.15B Iteration statements can be used to traverse a list.";
cspframework["3.2.15C"] = "3.2.15C The exam reference sheet provides FOR EACH item IN aList { <block of statements> } The variable item is assigned the value of each element of aList sequentially, in order from the first element to the last element. The code in block of statements is executed once for each assignment of item.";
cspframework["3.2.15D"] = "3.2.15D Knowledge of existing algorithms that use iteration can help in constructing new algorithms. Some examples of existing algorithms that are often used with lists include:";
cspframework["3.2.15E"] = "3.2.15E &middot; determining a minimum or maximum value in a list.";
cspframework["3.2.15F"] = "3.2.15F &middot; computing a sum or average of a list of numbers.";
cspframework["3.2.15G"] = "3.2.15G Linear search or sequential search algorithms check each element of a list in order until the desired value is found or all elements in the list have been checked.";
cspframework["3.2.16"] = "3.2.16 For binary search algorithms: (a) Determine the number of iterations required to find a value in a data set. (b) Explain the requirements necessary to complete a binary search.";
cspframework["3.2.16A"] = "3.2.16A The binary search algorithm starts at the middle of a sorted data set of numbers and eliminates half of the data in each iteration until the desired value is found or all elements have been eliminated. Exclusion: Specific implementations of the binary search are not tested on the exam.";
cspframework["3.2.16B"] = "3.2.16B Data must be in sorted order to use the binary search algorithm.";
cspframework["3.2.16C"] = "3.2.16C Binary search is often more efficient than sequential / linear search when the data is sorted.";
cspframework["3.3"] = "3.3 Programmers break down problems into smaller and more manageable pieces. By creating procedures and leveraging parameters, programmers generalize processes that can be reused. Procedures allow programmers to draw upon existing code that has already been tested, allowing programmers to write programs more quickly and with more confidence.";
cspframework["3.3.1"] = "3.3.1 Determine the result or effect of a procedure call.";
cspframework["3.3.1A"] = "3.3.1A A procedure is a named group of programming instructions that may have parameters and return values.";
cspframework["3.3.1B"] = "3.3.1B Procedures are referred to by different names, such as method or function, depending on the programming language.";
cspframework["3.3.1C"] = "3.3.1C Parameters are input variables of a procedure. Arguments specify the values of the parameters when a procedure is called.";
cspframework["3.3.1D"] = "3.3.1D A procedure call interrupts the sequential execution of statements, causing the program to first execute the statements within the procedure before continuing. Once the last statement in the procedure has executed, or a return statement is executed, flow of control is returned to the point immediately following where the procedure was called.";
cspframework["3.3.1E"] = "3.3.1E The exam reference sheet provides PROCEDURE NameOfProcedure (value1, value2, …) as a way to call the PROCEDURE NameOfProcedure (parameter1, parameter 2…) which takes zero or more arguments and value1 is assigned to parameter1 and value2 is assigned to parameter2.";
cspframework["3.3.1F"] = "3.3.1F The exam reference sheet provides the procedure DISPLAY(expression) to display the value of expression, followed by a space.";
cspframework["3.3.1G"] = "3.3.1G The exam reference sheet provides the RETURN statement, which is used to return the flow of control to the point where the procedure was called and to return a value.";
cspframework["3.3.1H"] = "3.3.1H The exam reference sheet provides procedure INPUT(), which accepts a value from the user and is equivalent to the input value.";
cspframework["3.3.1I"] = "3.3.1I The “value of a procedure” is the value returned from a call to the procedure.";
cspframework["3.3.2"] = "3.3.2 Explain how the use of procedural abstraction manages complexity in a program.";
cspframework["3.3.2A"] = "3.3.2A One common type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does, not how it does it.";
cspframework["3.3.2B"] = "3.3.2B Procedural abstraction allows a solution to a large problem to be based on the solution of smaller sub-problems. This is accomplished by creating procedures to solve each one of the sub-problems.";
cspframework["3.3.2C"] = "3.3.2C The process of subdividing a computer program into separate sub-programs is called modularity.";
cspframework["3.3.2D"] = "3.3.2D A procedural abstraction may extract shared features to generalize functionality instead of duplicating code. This allows for program code reuse, which helps to manage complexity.";
cspframework["3.3.2E"] = "3.3.2E Using procedural abstraction helps improve code readability.";
cspframework["3.3.2F"] = "3.3.2F Using procedural abstraction in a program allows programmers to change the internals of the procedure (to make it faster, more efficient, use less storage, etc.) without needing to notify users of the change as long as what the procedure does is preserved.";
cspframework["3.3.3"] = "3.3.3 Develop procedural abstractions to manage complexity in a program by writing procedures.";
cspframework["3.3.3A"] = "3.3.3A The exam reference sheet provides PROCEDURE NameOfProcedure (parameter1, parameter2, …) { <block of statements> } that is used to define a procedure that takes zero or more arguments.";
cspframework["3.3.3B"] = "3.3.3B The exam reference sheet provides PROCEDURE NameOfProcedure (parameter1, parameter2, …) { <block of statements> RETURN (expression) } that is used to define a procedure that takes zero or more arguments and contains programming instructions and returns the value of expression.";
cspframework["3.3.4"] = "3.3.4 Select appropriate libraries or existing code segments to use in creating new programs.";
cspframework["3.3.4A"] = "3.3.4A A software library contains procedures that may be used in creating new programs.";
cspframework["3.3.4B"] = "3.3.4B Existing code segments can come from internal or external sources, such as:";
cspframework["3.3.4C"] = "3.3.4C &middot; libraries; and";
cspframework["3.3.4D"] = "3.3.4D &middot; previously written code.";
cspframework["3.3.4E"] = "3.3.4E The use of libraries simplifies the task of creating complex programs.";
cspframework["3.3.4F"] = "3.3.4F Application program interfaces (APIs) are specifications for how the procedures in a library behave and can be used.";
cspframework["3.3.4G"] = "3.3.4G Documentation for an API/library is necessary in understanding the behavior(s) provided by the API/library and how to use them.";
cspframework["3.3.5"] = "3.3.5 For generating random values: (a) Write expressions to generate possible values. (b) Evaluate expressions to determine the possible results.";
cspframework["3.3.5A"] = "3.3.5A The exam reference sheet provides RANDOM(a, b) which represents the generation of a random integer from a to b, including a and b. For example, RANDOM(1, 3) could evaluate to 1, 2, or 3.";
cspframework["3.3.5B"] = "3.3.5B Using random number generation in a program means each execution could produce a different result.";
cspframework["3.3.6"] = "3.3.6 For simulations: (a) Explain how computers can be used to represent real-world phenomena or outcomes. (b) Compare the use of simulations with real-world contexts.";
cspframework["3.3.6A"] = "3.3.6A Simulations are abstractions of more complex objects or phenomena for a specific purpose.";
cspframework["3.3.6B"] = "3.3.6B A simulation is a representation that uses varying sets of values to reflect the changing state of the phenomenon.";
cspframework["3.3.6C"] = "3.3.6C Simulations often mimic real-world events with the purpose of drawing inferences allowing investigation of the phenomenon without the constraints of the real world.";
cspframework["3.3.6D"] = "3.3.6D The process of developing an abstract simulation involves removing specific details or simplifying functionality.";
cspframework["3.3.6E"] = "3.3.6E All simulations contain bias derived from the choices of elements of the realworld that were included or excluded.";
cspframework["3.3.6F"] = "3.3.6F Simulations are most useful when real-world events are impractical for experiments (i.e., too big, too small, too fast, too slow, too expensive or too dangerous).";
cspframework["3.3.6G"] = "3.3.6G Simulations facilitate the formulation and refinement of hypotheses related to the objects or phenomena under consideration.";
cspframework["3.3.6H"] = "3.3.6H Random number generators can be used to simulate the variability that exists in the real-world.";
cspframework["3.4"] = "3.4 There exist problems that the computer cannot solve, and even when the computer can solve a problem, it may not be able to do so in a reasonable amount of time.";
cspframework["3.4.1"] = "3.4.1 For determining the efficiency of an algorithm: (a)Explain the difference between algorithms that run in reasonable time and those that do not run in reasonable time. (b) Identify situations where a heuristic solution may be more appropriate.";
cspframework["3.4.1A"] = "3.4.1A A problem is a general description of a task that may (or may not) be solved algorithmically. An instance of a problem also includes specific input. For example, sorting is a problem, sorting the list (2,3,1,7) is an instance of the problem.";
cspframework["3.4.1B"] = "3.4.1B A decision problem is a problem with a yes-no answer. An optimization problem is a problem with the goal of finding the \"best\" solution among many. For example, is there a path from A to B? What is the shortest path from A to B?";
cspframework["3.4.1C"] = "3.4.1C Efficiency measures the number of steps an algorithm requires before it terminates. Efficiency is a function of the size of the input. EXCLUSION STATEMENT: Formal analysis of algorithms (Big-O) and formal reasoning using mathematical formulas are beyond the scope of this course and the AP Exam.";
cspframework["3.4.1D"] = "3.4.1D Determining an algorithm’s efficiency is done by reasoning formally or mathematically about the algorithm.";
cspframework["3.4.1E"] = "3.4.1E An algorithm\'s efficiency can be informally measured by determining the number of times a statement or group of statements executes.";
cspframework["3.4.1F"] = "3.4.1F Different correct algorithms for the same problem can have different efficiencies.";
cspframework["3.4.1G"] = "3.4.1G Algorithms with efficiencies that grow at a polynomial rate or slower (constant, linear, square, cube, etc.) are said to run in a reasonable amount of time. EXCLUSION STATEMENT (for EK): Using non-polynomial functions to describe relationships between the number of steps required by an algorithm and the input size is beyond the scope of this course and the AP Exam.";
cspframework["3.4.1H"] = "3.4.1H Some problems cannot be solved in a reasonable amount of time because there is no efficient algorithm for solving them. In these cases, approximate solutions are sought.";
cspframework["3.4.1I"] = "3.4.1I A heuristic is a technique that may allow programmers to find an approximate solution when typical methods fail to find an exact solution.";
cspframework["3.4.1J"] = "3.4.1J EXCLUSION STATEMENT (for EK 4.2.2B): Specific heuristic solutions are beyond the scope of this course and the AP Exam.";
cspframework["3.4.2"] = "3.4.2 Explain the existence of undecidable problems in computer science.";
cspframework["3.4.2A"] = "3.4.2A A decidable problem is a decision problem for which an algorithm can be written to produce a correct output for all inputs (e.g., “Is the number even?”).";
cspframework["3.4.2B"] = "3.4.2B An undecidable problem is one in which no algorithm can be constructed that is always capable of providing a correct yes-or-no answer. EXCLUSION STATEMENT (for EK 4.2.3C): Determining whether a given problem is undecidable is beyond the scope of this course and the AP Exam.";
cspframework["3.4.2C"] = "3.4.2C An undecidable problem may have some instances that have an algorithmic solution, but there is no algorithmic solution that solves all instances of the problem.";
cspframework["4.1"] = "4.1 Computer systems and networks facilitate how data is transferred.";
cspframework["4.1.1"] = "4.1.1 Explain how computing devices work together in a network.";
cspframework["4.1.1A"] = "4.1.1A A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors.";
cspframework["4.1.1B"] = "4.1.1B A computing system is a group of computing devices and programs working together for a common purpose.";
cspframework["4.1.1C"] = "4.1.1C A computer network is a group of interconnected computing devices capable of sending or receiving data.";
cspframework["4.1.1D"] = "4.1.1D A computer network is a type of a computing system.";
cspframework["4.1.1E"] = "4.1.1E A path between two computing devices on a computer network (a sender or a receiver) is a sequence of directly-connected computing devices beginning at the sender and ending at the receiver.";
cspframework["4.1.1F"] = "4.1.1F Routing is the process of finding a path from sender to receiver.";
cspframework["4.1.1G"] = "4.1.1G The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time.";
cspframework["4.1.1H"] = "4.1.1H Bandwidth is usually measured in bits per second.";
cspframework["4.1.2"] = "4.1.2 Explain how the Internet works.";
cspframework["4.1.2A"] = "4.1.2A The internet is a computer network consisting of interconnected networks that use standardized, open or non-proprietary, communication protocols.";
cspframework["4.1.2B"] = "4.1.2B Access to the Internet depends on the ability to connect a computing device to a part of the Internet.";
cspframework["4.1.2C"] = "4.1.2C A protocol is an agreed-upon set of rules that specify the behavior of some system.";
cspframework["4.1.2D"] = "4.1.2D The protocols used in the Internet are open which allows users to easily connect additional computing devices to the Internet.";
cspframework["4.1.2E"] = "4.1.2E Routing on the internet is usually dynamic; it is not specified in advance.";
cspframework["4.1.2F"] = "4.1.2F Scalability of a system is the capacity for the system to change in size and scale to meet new demands.";
cspframework["4.1.2G"] = "4.1.2G The Internet was designed to be scalable.";
cspframework["4.1.3"] = "4.1.3 Explain how data is sent through the Internet via packets.";
cspframework["4.1.3A"] = "4.1.3A Information is passed through the internet as a datastream. Datastreams contains chunks of data which are encapsulated in packets.";
cspframework["4.1.3B"] = "4.1.3B Packets contain a chunk of data and metadata used for routing a packet between the origin and the destination on the internet and data reassembly.";
cspframework["4.1.3C"] = "4.1.3C Packets may arrive at the destination in order, out-of-order, or not at all.";
cspframework["4.1.3D"] = "4.1.3D IP, TCP, and UDP are common protocols used on the Internet.";
cspframework["4.1.4"] = "4.1.4 Describe the differences between the Internet and the World Wide Web.";
cspframework["4.1.4A"] = "4.1.4A The world wide web is a system of linked pages, programs, and files.";
cspframework["4.1.4B"] = "4.1.4B The HTTP protocol is the used on the World Wide Web.";
cspframework["4.1.4C"] = "4.1.4C The World Wide Web uses the Internet.";
cspframework["4.1.5"] = "4.1.5 For fault-tolerant systems, like the internet: (a) Describe the benefits of fault-tolerance (b) Explain how a given system is fault-tolerant (c) Identify vulnerabilities in a system.";
cspframework["4.1.5A"] = "4.1.5A The internet has been engineered to be fault-tolerant, with abstractions for routing and transmitting data.";
cspframework["4.1.5B"] = "4.1.5B Redundancy is the inclusion of extra components that can be used to mitigate failure of the system if other components fail.";
cspframework["4.1.5C"] = "4.1.5C One way redundancy is accomplished in networks is by having more than one path between two devices.";
cspframework["4.1.5D"] = "4.1.5D If a particular device or connection on the internet fails, subsequent data will be sent via a different route, if possible.";
cspframework["4.1.5E"] = "4.1.5E When a system can support failures and still continue to function, it is called “fault-tolerant”; this is important because elements of complex systems fail at unexpected times, often in bunches, and fault-tolerance allows users to continue to use the network.";
cspframework["4.1.5F"] = "4.1.5F Redundancy within a system often requires additional resources but can provide the benefit of fault-tolerance.";
cspframework["4.1.5G"] = "4.1.5G The redundancy of routing between two points on the Internet increases the reliability of the Internet and helps it scale to more devices and more people.";
cspframework["4.2"] = "4.2 Parallel and distributed computing leverages multiple computers to more quickly solve complex problems or process large data sets.";
cspframework["4.2.1"] = "4.2.1 Compare problem solutions that use sequential, parallel, and distributed computing.";
cspframework["4.2.1A"] = "4.2.1A Sequential computing is a computational model in which operations are performed in order one at a time.";
cspframework["4.2.1B"] = "4.2.1B Parallel computing is a computational model where the program is broken into multiple smaller sequential computing operations some of which are performed simultaneously.";
cspframework["4.2.1C"] = "4.2.1C Distributed computing is a computational model in which multiple devices are used to run a program.";
cspframework["4.2.2"] = "4.2.2 Determine the efficiency of sequential and parallel solutions.";
cspframework["4.2.2A"] = "4.2.2A Comparing efficiency of solutions can be done by comparing the time it takes them to perform the same task";
cspframework["4.2.2B"] = "4.2.2B A sequential solution takes as long as the sum of all of its steps.";
cspframework["4.2.2C"] = "4.2.2C A parallel computing solution takes as long as its sequential tasks plus the longest of the tasks done in parallel.";
cspframework["4.2.2D"] = "4.2.2D The “speedup” of a parallel solution is measured in the time it took to complete the task sequentially divided by the time it took to complete the task when done in parallel.";
cspframework["4.2.3"] = "4.2.3 Describe benefits and challenges of parallel and distributed computing.";
cspframework["4.2.3A"] = "4.2.3A Parallel computing consists of a parallel portion and a sequential portion.";
cspframework["4.2.3B"] = "4.2.3B Solutions that use parallel computing can scale more effectively than solutions that use sequential computing.";
cspframework["4.2.3C"] = "4.2.3C Distributed computing allows problems to be solved that could not be solved on a single computer, either because of the processing time or storage needs involved.";
cspframework["4.2.3D"] = "4.2.3D Distributed computing allows much larger problems to be solved quicker than they could be solved using a single computer.";
cspframework["4.2.3E"] = "4.2.3E When increasing the use of parallel computing in a solution, the efficiency of the solution is still limited by the sequential portion. This means at some point, adding parallel portions will no longer increase efficiency.";
cspframework["5.1"] = "5.1 While computing innovations are typically designed to achieve a specific purpose, they may have unintended consequences.";
cspframework["5.1.1"] = "5.1.1 Explain how an effect of a computing innovation can be both beneficial and harmful.";
cspframework["5.1.1A"] = "5.1.1A People are creators of computing innovations.";
cspframework["5.1.1B"] = "5.1.1B As computing evolves, the way people complete tasks often changes to incorporate new computing innovations.";
cspframework["5.1.1C"] = "5.1.1C The total effects of a computing innovation are not always anticipated in advance.";
cspframework["5.1.1D"] = "5.1.1D A single effect can be viewed as both beneficial and harmful based on an individual’s perspectives.";
cspframework["5.1.1E"] = "5.1.1E Advances in computing have generated and increased creativity in other fields, such as medicine, engineering, communications and the arts.";
cspframework["5.1.2"] = "5.1.2 Explain how a computing innovation can have an impact beyond its intended purpose.";
cspframework["5.1.2A"] = "5.1.2A Computing innovations can be used in ways that the creator had not originally intended. Some examples include:";
cspframework["5.1.2B"] = "5.1.2B &middot; The World Wide Web was originally intended only for rapid and easy exchange of information within the scientific community;";
cspframework["5.1.2C"] = "5.1.2C &middot; Targeted advertising is used to help individuals, but it can be misused at both individual and aggregate levels;";
cspframework["5.1.2D"] = "5.1.2D &middot; Machine learning and data mining have enabled innovation in medicine, business, and science, but information discovered in this way could also be used to discriminate against groups of individuals.";
cspframework["5.1.2E"] = "5.1.2E Some of the unintended ways computing innovations can be used may have a harmful impact on society, economy, or culture.";
cspframework["5.1.2F"] = "5.1.2F Responsible programmers try to consider the unintended ways their computing innovations can be used and the potential beneficial and harmful effects of these new uses.";
cspframework["5.1.2G"] = "5.1.2G It is not possible for a programmer to consider all the ways a computing innovation can be used.";
cspframework["5.1.2H"] = "5.1.2H Often computing innovations have had a beneficial effect by leading to advances in other fields.";
cspframework["5.1.2I"] = "5.1.2I Rapid sharing of the program or the results of running a program with a large number of users can result in significant impacts beyond the intended purpose or control of the programmer.";
cspframework["5.1.3"] = "5.1.3 Describe issues that contribute to the digital divide.";
cspframework["5.1.3A"] = "5.1.3A Internet access varies between socioeconomic, geographic, or demographic characteristics and between countries.";
cspframework["5.1.3B"] = "5.1.3B The digital divide refers to differing access to computing devices and the Internet based on socioeconomic, geographic, or demographic characteristics.";
cspframework["5.1.3C"] = "5.1.3C The digital divide can affect both groups and individuals.";
cspframework["5.1.3D"] = "5.1.3D The digital divide raises issues of equity, access, and influence, both globally and locally.";
cspframework["5.1.3E"] = "5.1.3E The digital divide is affected by individuals, organizations and government actions.";
cspframework["5.1.4"] = "5.1.4 Explain how bias exists in computing innovations.";
cspframework["5.1.4A"] = "5.1.4A Computing innovations can reflect existing human biases because of biases written into the algorithms or biases in the data used by the innovation.";
cspframework["5.1.4B"] = "5.1.4B Programmers should take action to reduce bias in algorithms used for computing innovations as a way of combating existing human biases.";
cspframework["5.1.4C"] = "5.1.4C Biases can be embedded at all levels of software development.";
cspframework["5.1.5"] = "5.1.5 Explain how people participate in problem-solving processes at scale.";
cspframework["5.1.5A"] = "5.1.5A Widespread access to information and public data facilitates the identification of problems, development of solutions, and dissemination of results.";
cspframework["5.1.5B"] = "5.1.5B Science has been impacted by using scale and “citizen science” to solve scientific problems.";
cspframework["5.1.5C"] = "5.1.5C Citizen science is scientific research conducted in whole or part by individuals that contribute relevant data to research using their own computing devices.";
cspframework["5.1.5D"] = "5.1.5D Crowdsourcing is the practice of obtaining input or information from a large number of people via the Internet.";
cspframework["5.1.5E"] = "5.1.5E Human capabilities can be enhanced by collaboration via computing.";
cspframework["5.1.5F"] = "5.1.5F Crowdsourcing offers new models for collaboration, such as connecting people with jobs and businesses or social causes with funding.";
cspframework["5.1.6"] = "5.1.6 Explain how the use of computing could raise legal and ethical concerns.";
cspframework["5.1.6A"] = "5.1.6A Material created on a computer is the intellectual property of the creator or an organization.";
cspframework["5.1.6B"] = "5.1.6B Ease of access and distribution of digitized information raises intellectual property concerns regarding ownership, value, and use.";
cspframework["5.1.6C"] = "5.1.6C Measures should be taken to safeguard intellectual property.";
cspframework["5.1.6D"] = "5.1.6D The use of material created by someone else without permission is plagiarism and may have legal consequences.";
cspframework["5.1.6E"] = "5.1.6E Some examples of legal ways to use materials created by someone else include:";
cspframework["5.1.6F"] = "5.1.6F &middot; Creative Commons - a public copyright license that enables the free distribution of an otherwise copyrighted work. This is used when the content creator wants to give others the right to share, use, and build upon the work they have created.";
cspframework["5.1.6G"] = "5.1.6G &middot; open source – programs that are made freely available and may be redistributed and modified.";
cspframework["5.1.6H"] = "5.1.6H &middot; open access - online research outputs that are free of any and all restrictions on access, and free of many restrictions on use such as copyright or license restrictions.";
cspframework["5.1.6I"] = "5.1.6I The use of material created by someone other than yourself should always be cited.";
cspframework["5.1.6J"] = "5.1.6J Creative commons, open source, and open access have enabled broad access to digital information.";
cspframework["5.1.6K"] = "5.1.6K Using computing to harm individuals or groups of people raise legal and ethical concerns.";
cspframework["5.1.6L"] = "5.1.6L Computing can play a role in social and political issues which in turn often raise legal and ethical concerns.";
cspframework["5.1.6M"] = "5.1.6M The digital divide raises ethical concerns around computing.";
cspframework["5.1.6N"] = "5.1.6N Computing innovations can raise legal and ethical concerns. Some examples of these include:";
cspframework["5.1.6O"] = "5.1.6O &middot; the development of software that allows commercial access to music and movie downloads and streaming;";
cspframework["5.1.6P"] = "5.1.6P &middot; the development of algorithms that include bias; and";
cspframework["5.1.6Q"] = "5.1.6Q the existence of computing devices that are always listening and recording what you are saying.";
cspframework["5.2"] = "5.2 The use of computing innovations may involve risks to your personal safety and identity.";
cspframework["5.2.1"] = "5.2.1 Describe the risks to privacy from collecting and storing personal data on a computer system.";
cspframework["5.2.1A"] = "5.2.1A Personally identifiable information (PII) is information about an individual that identifies, links, relates, is unique to, or describes them. Examples of PII include:";
cspframework["5.2.1B"] = "5.2.1B &middot; social security number;";
cspframework["5.2.1C"] = "5.2.1C &middot; age;";
cspframework["5.2.1D"] = "5.2.1D &middot; race;";
cspframework["5.2.1E"] = "5.2.1E &middot; phone number(s);";
cspframework["5.2.1F"] = "5.2.1F &middot; medical information;";
cspframework["5.2.1G"] = "5.2.1G &middot; financial information; and";
cspframework["5.2.1H"] = "5.2.1H &middot; biometric data.";
cspframework["5.2.1I"] = "5.2.1I Search engines can record and maintain a history of searches made by users.";
cspframework["5.2.1J"] = "5.2.1J Websites can record and maintain a history of individuals who have viewed their pages.";
cspframework["5.2.1K"] = "5.2.1K Devices, websites, and networks can collect information about a user’s location.";
cspframework["5.2.1L"] = "5.2.1L Technology enables the collection, use, and exploitation of information about, by, and for individuals, groups, and institutions.";
cspframework["5.2.1M"] = "5.2.1M Search engines can use search history to suggest websites or for target marketing.";
cspframework["5.2.1N"] = "5.2.1N Disparate personal data, such as geolocation, cookies, and browsing history, can be aggregated to create knowledge about an individual.";
cspframework["5.2.1O"] = "5.2.1O PII and other information placed online can be used to enhance a user’s online experineces.";
cspframework["5.2.1P"] = "5.2.1P PII stored online can be used to simplify making online purchases.";
cspframework["5.2.1Q"] = "5.2.1Q Commerical and govermental curation of information may be exploited if privacy and other protections are ignored.";
cspframework["5.2.1R"] = "5.2.1R Information placed online can be used in ways that were not intended and in ways that may have a harmful impact. For example, an email message may be forwarded, tweets can be retweeted, social media posts can be viewed by potential employers.";
cspframework["5.2.1S"] = "5.2.1S PII can be used to stalk or steal the identiy of a person, or to aid in the planning of criminal acts.";
cspframework["5.2.1T"] = "5.2.1T It is difficult to delete information once it has been placed online.";
cspframework["5.2.1U"] = "5.2.1U Applications can collect your location and record where you have been, how you got there, and how long you have been at a given location.";
cspframework["5.2.1V"] = "5.2.1V Information posted to social media services can be used by others. Combining information posted on social media and other sources can be used to deduce private information about you.";
cspframework["5.2.2"] = "5.2.2 Explain how computing resources can be protected and can be misused.";
cspframework["5.2.2A"] = "5.2.2A Authentication measures protect devices and information from unauthorized access. Examples of authentication measures include:";
cspframework["5.2.2B"] = "5.2.2B &middot; Strong passwords; and";
cspframework["5.2.2C"] = "5.2.2C &middot; Multi-factor authentication.";
cspframework["5.2.2D"] = "5.2.2D A strong password is something that is easy for a user to remember but would be difficult for someone else to guess based on knowledge of that user.";
cspframework["5.2.2E"] = "5.2.2E Multi-factor authentication is a method of computer access control in which a user is only granted access after successfully presenting several separate pieces of evidence to an authentication mechanism--typically at least two of the following categories: knowledge (something they know); possession (something they have), and inherence (something they are).";
cspframework["5.2.2F"] = "5.2.2F Multi-factor authentication requires at least two steps to unlock protected information; each step adds a new layer of security that must be broken to gain unauthorized access.";
cspframework["5.2.2G"] = "5.2.2G Cryptographic protocols and techniques can be used to obscure information transmitted over a network. Examples of cryptographic protocols include";
cspframework["5.2.2H"] = "5.2.2H &middot; Symmetric encryption – a method of encryption involving one key for encryption and decryption;";
cspframework["5.2.2I"] = "5.2.2I &middot; Public key cryptography – a method of encryption that pairs a public key for encryption and a private key for decryption; and";
cspframework["5.2.2J"] = "5.2.2J &middot; Certificate authorities (CAs) – a method that issues digital certificates that validate the ownership of encryption keys used in secured communications and are based on a trust model. Exception: the mathematical methods used in cryptographic are beyond the scope of this course.";
cspframework["5.2.2K"] = "5.2.2K Computer virus and malware scanning software can help to protect a computing system against infection.";
cspframework["5.2.2L"] = "5.2.2L A computer virus is a malicious program that can copy itself and gain access to a computer in an unauthorized way. Computer viruses often attach themselves to legitimate programs, and start running independently on a computer.";
cspframework["5.2.2M"] = "5.2.2M Malware is software intended to damage a computing system or to take partial control over its operation.";
cspframework["5.2.2N"] = "5.2.2N All real-world systems have errors or design flaws that can be exploited to compromise them. Regular software updates help to fix errors that comprise a computing system.";
cspframework["5.2.2O"] = "5.2.2O Users can control the permissions applications have for collecting user information. Users should review the permissions of applications to protect their privacy.";
cspframework["5.2.3"] = "5.2.3 Explain how unauthorized access to computing resources is gained.";
cspframework["5.2.3A"] = "5.2.3A Phishing is a technique that is used to trick a user into providing personal information. That personal information can then be used to access sensitive online resources, such as bank accounts and emails.";
cspframework["5.2.3B"] = "5.2.3B Keylogging is the use of a program to record every keystroke made by a computer user, in order to gain fraudulent access to passwords and other confidential information.";
cspframework["5.2.3C"] = "5.2.3C Data sent over public networks can be intercepted, analyzed and modified. One way that this can happen is through a rogue access point.";
cspframework["5.2.3D"] = "5.2.3D A rogue access point is a wireless access point that gives unauthorized access to secure networks.";
cspframework["5.2.3E"] = "5.2.3E A malicious link can be disguised on a web page or in an email message.";
cspframework["5.2.3F"] = "5.2.3F Unsolicited emails, attachments, links, and forms in emails can be used to compromise the security of a computing system. These can come from unknown senders or from known senders whose security has been compromised.";
cspframework["5.2.3G"] = "5.2.3G Untrustworthy (often free) downloads from freeware or shareware sites can contain malware.";
